#!/usr/bin/env python3
"""
This script is designed to recursively search for and delete .terraform,
.terragrunt-cache directories, and .terraform.lock.hcl files within a
specified base directory (~/Documents/repositories/).

Features:
- Traversal: Scans the ~/Documents/repositories/ directory.
- Deletion: Removes identified .terraform, .terragrunt-cache directories,
  and .terraform.lock.hcl files.
- Error Handling: Provides feedback on successful deletions and any errors
  encountered.

Dependencies:
- Python 3 and standard libraries: os, shutil.

Usage:
The script is executed as a standalone Python script. It requires no
additional input from the user.
"""

__author__ = "Assistant"
__license__ = "GPL-2.0 license"

import os
import shutil


def delete_directory(path):
    """Delete a directory and its contents."""
    try:
        shutil.rmtree(path)
        print(f"Deleted directory: {path}")
    except Exception as e:
        print(f"Error deleting directory {path}: {e}")


def delete_file(path):
    """Delete a file."""
    try:
        os.remove(path)
        print(f"Deleted file: {path}")
    except Exception as e:
        print(f"Error deleting file {path}: {e}")


def find_and_clean(base):
    """Find and delete specified directories and files."""
    dirs_to_delete = [".terraform", ".terragrunt-cache"]
    files_to_delete = [".terraform.lock.hcl"]

    for root, dirs, files in os.walk(base, topdown=False):
        for dir_name in dirs_to_delete:
            if dir_name in dirs:
                path_to_delete = os.path.join(root, dir_name)
                delete_directory(path_to_delete)
                dirs.remove(dir_name)

        for file_name in files_to_delete:
            if file_name in files:
                path_to_delete = os.path.join(root, file_name)
                delete_file(path_to_delete)


def main():
    """Main function."""
    base_directory = os.path.expanduser("~/Documents/repositories/")

    if not os.path.exists(base_directory):
        print(f"The specified directory does not exist: {base_directory}")
        return

    try:
        print(f"Starting search in: {base_directory}")
        find_and_clean(base_directory)
        print("\nFinished cleaning Terraform and Terragrunt cache files and directories.")
    except KeyboardInterrupt:
        print("\nScript interrupted by the user. Exiting.")


if __name__ == "__main__":
    main()

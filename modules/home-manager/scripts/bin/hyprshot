#!/usr/bin/env bash

set -e

function Help() {
	cat <<EOF
Usage: hyprshot [options ..] [-m [mode] ..] -- [command]

Hyprshot is an utility to easily take screenshot in Hyprland using your mouse.

It allows taking screenshots of windows, regions and monitors which are saved to a folder of your choosing and copied to your clipboard.

Examples:
  capture a window                      \`hyprshot -m window\`
  capture active window to clipboard    \`hyprshot -m window -m active --clipboard-only\`
  capture selected monitor              \`hyprshot -m output -m DP-1\`

Options:
  -h, --help                show help message
  -m, --mode                one of: output, window, region, active, OUTPUT_NAME
  -o, --output-folder       directory in which to save screenshot
  -f, --filename            the file name of the resulting screenshot
  -D, --delay               how long to delay taking the screenshot after selection (seconds)
  -z, --freeze              freeze the screen on initialization
  -d, --debug               print debug information
  -s, --silent              don't send notification when screenshot is saved
  -r, --raw                 output raw image data to stdout
  -t, --notif-timeout       notification timeout in milliseconds (default 5000)
  --clipboard-only          copy screenshot to clipboard and don't save image in disk
  -- [command]              open screenshot with a command of your choosing. e.g. hyprshot -m window -- mirage

Modes:
  output        take screenshot of an entire monitor
  window        take screenshot of an open window
  region        take screenshot of selected region
  active        take screenshot of active window|output
                (you must use --mode again with the intended selection)
  OUTPUT_NAME   take screenshot of output with OUTPUT_NAME
                (you must use --mode again with the intended selection)
                (you can get this from \`hyprctl monitors\`)
EOF
}

function Print() {
	if [ $DEBUG -eq 0 ]; then
		return 0
	fi
	local fmt="$1"
	shift
	# shellcheck disable=SC2059 # $fmt is intentionally the format string
	1>&2 printf "$fmt" "$@"
}

function send_notification() {
	if [ $SILENT -eq 1 ]; then
		return 0
	fi

	local message
	if [ $CLIPBOARD -eq 1 ]; then
		message="Image copied to the clipboard"
	else
		message="Image saved in <i>${1}</i> and copied to the clipboard."
	fi
	notify-send "Screenshot saved" \
		"${message}" \
		-t "$NOTIF_TIMEOUT" -i "${1}" -a Hyprshot
}

function trim() {
	Print "Geometry: %s\n" "${1}"
	local geometry="${1}"
	local xy_str wh_str x y width height
	local max_width max_height min_x min_y
	local cropped_x cropped_y cropped_width cropped_height
	local cropped

	xy_str=$(echo "${geometry}" | cut -d' ' -f1)
	wh_str=$(echo "${geometry}" | cut -d' ' -f2)
	x=$(echo "${xy_str}" | cut -d',' -f1)
	y=$(echo "${xy_str}" | cut -d',' -f2)
	width=$(echo "${wh_str}" | cut -dx -f1)
	height=$(echo "${wh_str}" | cut -dx -f2)

	max_width=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.x + .width) else (.x + .height) end] | max')
	max_height=$(hyprctl monitors -j | jq -r '[.[] | if (.transform % 2 == 0) then (.y + .height) else (.y + .width) end] | max')

	min_x=$(hyprctl monitors -j | jq -r '[.[] | (.x)] | min')
	min_y=$(hyprctl monitors -j | jq -r '[.[] | (.y)] | min')

	cropped_x=$x
	cropped_y=$y
	cropped_width=$width
	cropped_height=$height

	if ((x + width > max_width)); then
		cropped_width=$((max_width - x))
	fi
	if ((y + height > max_height)); then
		cropped_height=$((max_height - y))
	fi

	if ((x < min_x)); then
		cropped_x="$min_x"
		cropped_width=$((cropped_width + x - min_x))
	fi
	if ((y < min_y)); then
		cropped_y="$min_y"
		cropped_height=$((cropped_height + y - min_y))
	fi

	cropped=$(printf "%s,%s %sx%s" \
		"${cropped_x}" "${cropped_y}" \
		"${cropped_width}" "${cropped_height}")
	Print "Crop: %s\n" "${cropped}"
	echo "${cropped}"
}

function save_geometry() {
	local geometry="${1}"
	local output=""

	if [ $RAW -eq 1 ]; then
		grim -g "${geometry}" -
		return 0
	fi

	if [ $CLIPBOARD -eq 0 ]; then
		mkdir -p "$SAVEDIR"
		grim -g "${geometry}" "$SAVE_FULLPATH"
		output="$SAVE_FULLPATH"
		wl-copy --type image/png <"$output"
		if [ ${#COMMAND_ARGS[@]} -gt 0 ]; then
			"${COMMAND_ARGS[@]}" "$output"
		fi
	else
		wl-copy --type image/png < <(grim -g "${geometry}" -)
	fi

	send_notification "$output"
}

function checkRunning() {
	sleep 1
	while true; do
		if [[ $(pgrep slurp | wc -m) == 0 ]]; then
			pkill hyprpicker
			exit
		fi
		sleep 0.1
	done
}

function begin_grab() {
	if [ $FREEZE -eq 1 ] && [ "$(command -v "hyprpicker")" ] >/dev/null 2>&1; then
		hyprpicker -r -z &
		sleep 0.2
	fi
	local option="$1"
	local geometry

	case "$option" in
	output)
		if [ $CURRENT -eq 1 ]; then
			geometry=$(grab_active_output)
		elif [ -z "$SELECTED_MONITOR" ]; then
			geometry=$(grab_output)
		else
			geometry=$(grab_selected_output "$SELECTED_MONITOR")
		fi
		;;
	region)
		geometry=$(grab_region)
		;;
	window)
		if [ $CURRENT -eq 1 ]; then
			geometry=$(grab_active_window)
		else
			geometry=$(grab_window)
		fi
		local trimmed_geometry
		trimmed_geometry=$(trim "${geometry}")
		geometry="$trimmed_geometry"
		;;
	esac
	if [ "${DELAY:-0}" -gt 0 ]; then
		sleep "${DELAY}"
	fi
	save_geometry "${geometry}"
}

function grab_output() {
	slurp -or
}

function grab_active_output() {
	local active_workspace monitors current_monitor active_ws_id
	active_workspace=$(hyprctl -j activeworkspace)
	monitors=$(hyprctl -j monitors)
	Print "Monitors: %s\n" "$monitors"
	Print "Active workspace: %s\n" "$active_workspace"

	active_ws_id=$(echo "$active_workspace" | jq -r '.id')
	current_monitor=$(echo "$monitors" | jq -r --argjson id "$active_ws_id" 'first(.[] | select(.activeWorkspace.id == $id))')

	Print "Current output: %s\n" "$current_monitor"
	echo "$current_monitor" | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_selected_output() {
	local monitor_name="$1"
	local monitor
	Print "Capturing: %s\n" "${monitor_name}"
	monitor=$(hyprctl -j monitors | jq -r --arg name "$monitor_name" '.[] | select(.name == $name)')
	echo "$monitor" | jq -r '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_region() {
	slurp -d
}

function grab_window() {
	local monitors clients boxes active_ws_ids_json
	monitors=$(hyprctl -j monitors)

	active_ws_ids_json=$(echo "$monitors" | jq -r 'map(.activeWorkspace.id)')
	clients=$(hyprctl -j clients | jq -r --argjson ids "$active_ws_ids_json" '[.[] | select(.workspace.id as $wsid | $ids | index($wsid))]')

	Print "Monitors: %s\n" "$monitors"
	Print "Clients: %s\n" "$clients"
	boxes="$(echo "$clients" | jq -r '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1]) \(.title)"' | cut -f1,2 -d' ')"
	Print "Boxes:\n%s\n" "$boxes"
	slurp -r <<<"$boxes"
}

function grab_active_window() {
	local active_window box
	active_window=$(hyprctl -j activewindow)
	box=$(echo "$active_window" | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"' | cut -f1,2 -d' ')
	Print "Box:\n%s\n" "$box"
	echo "$box"
}

function parse_mode() {
	local mode_arg="$1"

	case "$mode_arg" in
	window | region | output)
		OPTION="$mode_arg"
		;;
	active)
		CURRENT=1
		;;
	*)
		if hyprctl monitors -j | jq -re --arg name "$mode_arg" '.[] | select(.name == $name)' &>/dev/null; then
			SELECTED_MONITOR="$mode_arg"
		else
			Print "Error: Unknown mode or output name: %s\n" "$mode_arg"
			exit 3
		fi
		;;
	esac
}

COMMAND_ARGS=()

function args() {
	local options
	options=$(getopt -o hf:o:m:D:dszr:t: --long help,filename:,output-folder:,mode:,delay:,clipboard-only,debug,silent,freeze,raw,notif-timeout: -- "$@")
	eval set -- "$options"

	while true; do
		case "$1" in
		-h | --help)
			Help
			exit
			;;
		-o | --output-folder)
			shift
			SAVEDIR="$1"
			;;
		-f | --filename)
			shift
			FILENAME="$1"
			;;
		-D | --delay)
			shift
			DELAY="$1"
			;;
		-m | --mode)
			shift
			parse_mode "$1"
			;;
		--clipboard-only)
			CLIPBOARD=1
			;;
		-d | --debug)
			DEBUG=1
			;;
		-z | --freeze)
			FREEZE=1
			;;
		-s | --silent)
			SILENT=1
			;;
		-r | --raw)
			RAW=1
			;;
		-t | --notif-timeout)
			shift
			NOTIF_TIMEOUT="$1"
			;;
		--)
			shift
			COMMAND_ARGS=("$@")
			break
			;;
		esac
		shift
	done

	if [ -z "$OPTION" ]; then
		Print "A mode is required\n\nAvailable modes are:\n\toutput\n\tregion\n\twindow\n"
		exit 2
	fi
}

if [ -z "$1" ]; then
	Help
	exit
fi

CLIPBOARD=0
DEBUG=0
SILENT=0
RAW=0
NOTIF_TIMEOUT=5000
CURRENT=0
FREEZE=0
if [ -z "$XDG_PICTURES_DIR" ] && type xdg-user-dir &>/dev/null; then
	XDG_PICTURES_DIR=$(xdg-user-dir PICTURES)
fi
FILENAME="$(date +'%Y-%m-%d-%H%M%S_hyprshot.png')"
if [ -z "$HYPRSHOT_DIR" ]; then
	SAVEDIR="${XDG_PICTURES_DIR:-$HOME/Pictures}"
else
	SAVEDIR="${HYPRSHOT_DIR}"
fi

args "$0" "$@"

SAVE_FULLPATH="$SAVEDIR/$FILENAME"
[ $CLIPBOARD -eq 0 ] && Print "Saving in: %s\n" "$SAVE_FULLPATH"
begin_grab "$OPTION" &
checkRunning
